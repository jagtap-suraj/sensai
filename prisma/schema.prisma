// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique // clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  industry      String?    // Combined industry-subindustry (e.g., "tech-software-development")
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile fields
  bio           String?
  experience    Int?      // Years of experience
  
  // Relations
  skills        String[]  // Array of skills
  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]
  interviews    Interview[]
}

model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float     // Overall quiz score
  questions     Json[]    // Array of {question, answer, userAnswer, isCorrect}
  category      String    // "Technical", "Behavioral", etc.
  improvementTip String?  // AI-generated improvement tip
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id            String    @id @default(cuid())
  userId        String    @unique    // One resume per user
  user          User      @relation(fields: [userId], references: [id])
  
  // Contact information
  firstName     String?
  lastName      String?
  email         String
  countryCode   String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  linkedin      String?
  github        String?
  
  // Resume content
  summary       String?   @db.Text
  
  // Relations to other tables
  education     Education[]
  experience    Experience[]
  projects      Project[]
  coursework    Coursework[]
  skills        Skill[]
  leadership    Leadership[]
  certifications Certification[]
  
  // Metrics
  atsScore      Float?
  feedback      String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Education {
  id            String    @id @default(cuid())
  resumeId      String
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  title         String    // Degree
  organization  String    // School/University
  location      String?   // City, State
  gpa           String?   // GPA (stored as string to allow formats like "3.8/4.0")
  startDate     DateTime
  endDate       DateTime?
  current       Boolean   @default(false)
  description   String?   @db.Text  // Optional description
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([resumeId])
}

model Experience {
  id            String    @id @default(cuid())
  resumeId      String
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  title         String    // Job title
  organization  String    // Company
  location      String?   // City, State
  startDate     DateTime
  endDate       DateTime?
  current       Boolean   @default(false)
  description   String    @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([resumeId])
}

model Project {
  id            String    @id @default(cuid())
  resumeId      String
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  title         String
  organization  String?   // Optional associated organization
  technologies  String?   // Technologies used (e.g., "Python, React")
  deployedLink  String?   // URL to deployed project
  startDate     DateTime?
  endDate       DateTime?
  current       Boolean   @default(false)
  description   String    @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([resumeId])
}

model Coursework {
  id            String    @id @default(cuid())
  resumeId      String
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  name          String
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([resumeId])
}

model Skill {
  id            String    @id @default(cuid())
  resumeId      String
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  category      String    // "Language", "Tool", "Framework"
  name          String
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([resumeId])
}

model Leadership {
  id            String    @id @default(cuid())
  resumeId      String
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  title         String    // Position
  organization  String    // Organization name
  startDate     DateTime
  endDate       DateTime?
  current       Boolean   @default(false)
  description   String    @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([resumeId])
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    // Markdown content
  jobDescription  String?
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  status          String    @default("draft") // draft, completed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

// Combined Industry Trends and Salary Insights
model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique  // The industry this data belongs to (e.g., "tech-software-development")
  
  // Users in this industry
  users         User[]
  
  // Salary data
  salaryRanges  Json[]    // Array of { role: string, min: float, max: float, median: float, location: string? }
  
  // Industry trends
  growthRate    Float     // Industry growth rate
  demandLevel   String    // "High", "Medium", "Low"
  topSkills     String[]  // Most in-demand skills
  
  // Market conditions
  marketOutlook String    // "Positive", "Neutral", "Negative"
  keyTrends     String[]  // Array of current industry trends
  
  // Learning suggestions
  recommendedSkills String[]  // Skills recommended for the industry
  
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  // Scheduled update time

  @@index([industry])
}

// Simplified interview model based on the other project's types
model Interview {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Interview details - matches the other project's Interview type
  role            String?    // Job role (e.g., "Frontend Developer")
  level           String?   // Job level (e.g., "Senior", "Junior")
  type            String?    // "technical", "behavioral", etc.
  techstack       String[]  // Technologies relevant to the interview
  questions       String[]  // Pre-defined interview questions
  
  // Vapi details - minimal needed fields
  vapiCallId      String?   @unique
  recordingUrl    String?
  
  // Interview state
  finalized       Boolean   @default(false)
  
  // Feedback - nested as JSON instead of separate table for simplicity
  feedback        Json?     // Includes totalScore, categoryScores, strengths, areasForImprovement, finalAssessment
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

model Certification {
  id            String    @id @default(cuid())
  resumeId      String
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  name          String
  issuer        String
  issueDate     DateTime
  expiryDate    DateTime?
  credentialId  String?
  credentialUrl String?
  description   String?   @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([resumeId])
}

